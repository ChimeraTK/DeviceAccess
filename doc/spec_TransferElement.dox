// put the namespace around the doxygen block so we don't have to give it all the time in the code to get links
namespace ChimeraTK {
/**
\page spec_TransferElement Technical specification: TransferElement V1.0RC8WIP !! Based on RC6. Changes from RC7 still missing !!

> **This is a release candidate in implementation. The official V1.0 release will be done once the implementation is ready and we know that the specified behavious is working as intended.**

> **NOTICE FOR FUTURE RELEASES: AVOID CHANGING THE NUMBERING!** The tests refer to the sections, incl. links and unlinked references from tests or other parts of the specification. These break, or even worse become wrong, when they are not changed consistenty!

## Introduction ##

This documnent is currently still **INCOMPLETE**!

## A. Definitions ##

- 1. A <i>process variable</i> is the logical entity which is accessed through the TransferElement. Outside this document, it is sometimes also called register.
  - 1.1 A process variable can be read-only, write-only or read-write (bidirectional).
  - 1.2 A process variable has a data type.
  - 1.3 A process variable has a fixed <i>number of elements</i> and a <i>number of channels</i>.
    - 1.3.1 For scalars, both the number of elements and channels are 1.
    - 1.3.2 For 1D arrays, the number of channels is 1.

- 2. A <i>device</i> is the logical entity which owns the <i>process variable</i>. The device can be a piece of hardware, another application or even the current application.
  - 2.1 The first two cases (piece of hardware and another application) are considered identical, since just different <i>backends</i> are used for the communication.
  - 2.2 The third case (current application) is when using the ChimeraTK::ControlSystemAdapter::ProcessArray e.g. in ApplicationCore.
  - 2.3 The application-side behavior of all three cases is identical. The requirements for the implementation are slightly different in some aspects. This will be mentioned where applicable.

- 3. A <i>transfer</i> is the exchange of data between the application and the device, using a transfer protocol which determines the technical implementation. The protocol used for the transfer is determined by the backend and hence all details about the protocol are abstracted and not visible by the application.

- 4. An <i>operation</i> is the action taken by the application to read or write data from or to a device. An operation is related to a transfer, yet it is to be distinguished. The transfer can e.g. be initiated by the device, while the operation is always initiated by the application.

- 5. \anchor transferElement_A_5 The <i>application buffer</i> (sometimes also called user buffer outside this document) is referring to the buffer containing the data and meta data, which is accessible to the application.
  - 5.1 It can be accessed through the following (non-virtual) functions:
    - NDRegisterAccessor::accessData() / NDRegisterAccessor::accessChannel() - gives access to NDRegisterAccessor::buffer_2D
    - TransferElement::getVersionNumber() - returns content of TransferElement::_versionNumber
    - TransferElement::dataValidity() - returns content of TransferElement::_dataValidity
  - 5.2 If not stated otherwise, the term <i>application buffer</i> refers to **all** components of the buffer.
  - 5.3 The content of the buffer is filled with data from the device in read operations, and transferred to the device in write operations.
  - 5.4 The content of the buffer can always be modified by the application.(*)
  - 5.5 NDRegisterAccessor::buffer_2D is referred to as *data buffer*, while TransferElement::_versionNumber and TransferElement::_dataValidity form the *meta data buffer*

- 6. Placeholders are used to summarise various function names:
  - 6.1 xxxYyy(), public, operations called by the application (through the TransfeElementAbstractor)
    - void TransferElement::read()
    - bool TransferElement::readNonBlocking()
    - bool TransferElement::readLatest()
    - bool TransferElement::write(VersionNumber versionNumber = {})
    - bool TransferElement::writeDestructively(VersionNumber versionNumber = {})
  - 6.2 preXxx(), public
    - void TransferElement::preRead(TransferType type)
    - void TransferElement::preWrite(TransferType type, VersionNumber versionNumber)
  - 6.3 doPreXxx(), protected virtual
    - void TransferElement::doPreRead(TransferType type)
    - void TransferElement::doPreWrite(TransferType type, VersionNumber versionNumber)
  - 6.4 xxxTransferYyy(), public
    - void TransferElement::readTransfer()
    - bool TransferElement::readTransferNonBlocking()
    - bool TransferElement::writeTransfer(VersionNumber versionNumber)
    - bool TransferElement::writeTransferDestructively(VersionNumber versionNumber)
  - 6.5 doXxxTransferYyy(), protected
    - void TransferElement::doReadTransferSynchonously(), pure virtual (*)
    - bool TransferElement::doWriteTransfer(VersionNumber versionNumber), pure virtual
    - bool TransferElement::doWriteTransferDestructively(VersionNumber versionNumber), virtual
  - 6.6 postXxx(), public
    - void TransferElement::postRead(TransferType type, bool updateDataBuffer)
    - void TransferElement::postWrite(TransferType type, VersionNumber versionNumber)
  - 6.7 doPostXxx(), protected virtual
    - void TransferElement::doPostRead(TransferType type, bool updateDataBuffer)
    - void TransferElement::doPostWrite(TransferType type, VersionNumber versionNumber)

- 7. Virtual and non-virtual functions
  - 7.1 The non-virtual functions preXxx(), xxxTransferYyy(), and postXxx() implement common, decorating functionality like exception handling in the TransferElement base class
  - 7.2 They internally call their virtual counterparts which start with 'do'
  - 7.3 The virtual do-functions are the actual implementations of the transfer or pre/post action, which are specific for each backend, decorator etc.

### (*) Comments ###

- 5.4 The buffer is accessed by the read/write operatons and must not be changed at this time. As transfer elements are not thread safe (B.1) this means the application will either perform an operation or otherwise change the buffer ad libitum.
- 6.5 doReadTransferSynchonously() is currently called doReadTransfer(). This should be renamed.

## B. Behavioural specification ##

- 1. TransferElements are not thread safe

- 2. Data types [TODO]

- 3. Modes of transfers

  - 3.1 Read operations:
    - 3.1.1 The flag AccessMode::wait_for_new_data determines whether the transfer is initiated by the device side (flag is set) or not.
    - 3.1.2 If AccessMode::wait_for_new_data is not set, read operations
      - \anchor transferElement_B_3_1_2_1 3.1.2.1 obtain the <i>current</i> value of the process variable (if possible/applicable by synchronously communicating with the device) [\ref UnifiedTest_TransferElement_B_3_1_2_1 "U"],
      - 3.1.2.2 have no information whether the value has changed,
      - 3.1.2.3 behave identical whether read(), readNonBlocking() or readLatest() is called,
      - 3.1.2.4 readNonBlocking() and readLatest() always return true.
    - \anchor transferElement_B_3_1_3 3.1.3 If AccessMode::wait_for_new_data is set [\ref UnifiedTest_TransferElement_B_3_1_3 "U" (with sub-points)]
      - 3.1.3.1 read() blocks until new data has arrived,
      - 3.1.3.2 readNonBlocking() does not block and instead returns whether new data has arrived or not,
    - \anchor transferElement_B_3_1_4 3.1.4 readLatest() is merely a convenience function which calls readNonBlocking() until no more new data is available. [\ref testTransferElement_B_3_1_4 "T"]

  - 3.2 Write operations
    - 3.2.1 do not distingish on which end the transfer is initiated. The API allows for application-initiated transfers and is compatible with device-initiated transfers as well.
      - \anchor transferElement_B_3_2_1_2 3.2.1.2 It is guaranteed that the application buffer is still intact after calling TransferElement::write().
    - \anchor transferElement_B_3_2_2 3.2.2 can optionally be "destructively", which allows the implementation to destroy content of the application buffer in the process.
      - 3.2.2.1 Applications can allow this optimisation by using writeDestructively() instead of write().
      - \anchor transferElement_B_3_2_2_2 3.2.2.2 Applications are not allowed to use the content of the application buffer after writeDestructively().\ref transferElement_comment_B_3_2_2_2 "(*)"

- \anchor transferElement_B_4 4. Stages of an operation initiated by calling the public high level functions xxxYyy() (see. A.6.1) [\ref testTransferElement_B_4_sync "T", \ref testTransferElement_B_4_async "T" (both except 4.3.2)]
  - 4.1 preXxx(): calls doPreXxx() of the implementation to allow preparatory work before the actual transfer. doPreXxx() can be empty if nothing is to be done (*)
  - 4.2 xxxTransferYyy():
    - 4.2.1 readTransfer()
      - If wait_for_new_data is set, it waits until new data has been received and returns
      - If wait_for_new_data is not set, it calls doReadTransferSynchrously()
    - 4.2.2 readTransferNonBlocking()
      - If wait_for_new_data is set, it returns immediately with the information whether new data has been received
      - If wait_for_new_data is not set, it calls doReadTransferSynchrously() and returns true
    - 4.2.3 writeTransferYyy() calls the corresonding doWriteTransferYyy()
    - 4.2.4 Transfer implementations do not change the application buffer
  - 4.3 postXxx(): calls doPostXxx() of the implementation to allow follow-up work after the actual transfer.
    - 4.3.1 In read transfers, doPostRead() is the only place where the application buffer may be changed (*).
    - \anchor transferElement_B_4_3_2 4.3.2 In write transfers, postWrite() updates the version number of the application buffer TransferElement::_versionNumber to the version number provided to the write() call, if no exception is (re-)thrown in doPostWrite() (cf. \ref transferElement_B_11_3 "B.11.3"). [\ref testTransferElement_B_4_3_2 "T"]

- \anchor transferElement_B_5 5. preXxx() and postXxx(), resp. doPreXxx() and doPostXxx(), are always called in pairs. (*) [\ref testTransferElement_B_5_sync "T", \ref testTransferElement_B_5_async "T" (both without sub-points)]
  - \anchor transferElement_B_5_1 5.1 This holds even if exceptions (both ChimeraTK::logic_error and ChimeraTK::runtime_error, and also boost::numeric::bad_numeric_cast) are thrown (see 6). \ref transferElement_comment_B_5_1 "(*)" [\ref testTransferElement_B_5_1_sync "T", \ref testTransferElement_B_5_1_async "T"]
  - \anchor transferElement_B_5_2 5.2 The implementations of preXxx() and postXxx() ignore duplicate calls, such that a call to doPreXxx() is never followed by another call to doPreXxx() before doPostXxx() has been called, and vice versa. [\ref testTransferElement_B_5_2 "T"]

- \anchor transferElement_B_6 6. Exceptions thrown in doPreXxx(), doXxxTransferYyy() or received on the TransferElement::_readQueue are caught and delayed until postXxx() by the framework. This ensures that preXxx() and postXxx() are always called in pairs. [\ref testTransferElement_B_6 "T"]
  - \anchor transferElement_B_6_1 6.1 If in preXxx() an exception is thrown, the corresponding xxxTransferYyy() is not called, instead directly postXxx() is called. [\ref testTransferElement_B_6_1_read "T", \ref testTransferElement_B_6_1_write "T"]
  - 6.2 To ensure \ref  transferElement_B_6_1 "6.1" is guaranteed with decorators, the exception has to be caught and stored in the outermost decorator, i.e. in the public xxxYyy() which delegate to the transfers.
  - \anchor transferElement_B_6_3 6.3 To ensure that the ApplicationCore ExeptionHandlingDecorator works in combination with other decorators, each decorator has to pass the stored exception to its target, and it has to be re-thrown in the doPostRead() of the layer where the exception originated (see \ref transferElement_C_2 "C.2") [\ref testTransferElement_B_6_3 "T"]
  - \anchor transferElement_B_6_4 6.4 When an exception is finally thrown by a TransferElement, the application buffer must still be unchanged. \ref  transferElement_comment_B_6_4 "(*)" [\ref UnifiedTest_TransferElement_B_6_4_syncRead "U", \ref UnifiedTest_TransferElement_B_6_4_asyncRead "U", \ref UnifiedTest_TransferElement_B_6_4_write "U"]

- \anchor transferElement_B_7 7. Return values of xxxTransferYyy(): [\ref testTransferElement_B_7_sync "T", \ref testTransferElement_B_7_async "T" (both except 7.4)]
  - 7.1 readTransferNonBlocking() returns whether new data has been received (see 4.2.2)
  - \anchor transferElement_B_7_2 7.2 writeTransfer() and writeTransferDestructively() return whether data has been lost. If it returns true, previous data was rejected in the process of the transfer. It is always guaranteed that the data of the current transfer is not lost. \ref transferElement_comment_B_7_2 "(*)"
  - 7.3 For read operations, the return value is passed on to postRead() (via updateDataBuffer), to allow the doPostXxx() implementations to decide the right actions. In case of readTransfer(), updateDataBuffer is set to true.
  - \anchor transferElement_B_7_4 7.4 In case of an exception in either preRead() or readTransferYyy(), postRead() is called with updateDataBuffer = false because there was no successful transfer. [\ref testTransferElement_B_7_4_sync "T", \ref testTransferElement_B_7_4_async "T"]

- 8. Read operations with AccessMode::wait_for_new_data:
  - 8.1 Since the transfer is initiated by the device side in this case, the transfer is asynchronous to the read operation.
  - \anchor transferElement_B_8_2 8.2 The backend fills any received values into the TransferElement::_readQueue \ref transferElement_comment_B_8_2 "(*)", from which the read()/readNonBlocking() operations will obtain the value. [\ref testTransferElement_B_8_2 "T" (without sub-points), \ref UnifiedTest_TransferElement_B_8_2 "U" (without sub-points)]
    - \anchor transferElement_B_8_2_1 8.2.1 If the queue is full, the last written value will be overwritten. [\ref UnifiedTest_TransferElement_B_8_2_1 "U"]
    - \anchor transferElement_B_8_2_2 8.2.2 The backend may fill a ChimeraTK::detail::DiscardValueException to the queue, which has the same effect on the application side as if no entry was filled to the queue. (*) [\ref testTransferElement_B_8_2_2 "T"]
  - \anchor transferElement_B_8_3 8.3 Runtime errors like broken connections are reported by the backend by pushing ChimeraTK::runtime_error exceptions into the queue. The exception will then be obtained by the read operation in place of a value. [\ref UnifiedTest_TransferElement_B_8_3 "U" (first sentence), \ref testTransferElement_B_8_3 "T" (second sentence)]
  - 8.4 The backend ensures consistency of the value with the device, even if data loss may occur on the transport layer. If necessary, a heartbeat mechanism is implemented to correct any inconsistencies at regular intervals.
  - \anchor transferElement_B_8_5 8.5 For transfer elements which are created before the device has been opened (or after the device has seen an exception, see 9.) the backend does not fill any data into the queue until the device has successfully been opened and Device::activateAsyncRead() is called (*). Also no runtime_errors are send. We call this *asyncronous read is not activated* for these transfer elements. [\ref UnifiedTest_TransferElement_B_8_5 "U" (without sub-points)].
      - \anchor transferElement_B_8_5_1 8.5.1 When Device::activateAsyncRead() is called, it activates asyncronous read for all transfer elements where AccessMode::wait_for_new_data is set (*) [\ref UnifiedTest_TransferElement_B_8_5_1 "U"].
      - \anchor transferElement_B_8_5_2 8.5.2 In case the device does not send an initial value after the subscription, the accessor implementation must get an initial value synchronously and treat it as if it would have been received, i.e. push it to the queue. This must happen after the actual asynchronous sending has been turned on to make sure no update is missed. (*) [\ref UnifiedTest_TransferElement_B_8_5_2 "U"]
      - \anchor transferElement_B_8_5_3 8.5.3 If a transfer element is created while the device is opened and functional, the asynchronous read is activated automatically (incl. sending of the initial value). This happens even if there are other transfer elements which have the asynchronous read deactivated because they have been created before opening the device and Device::activateAsyncRead() has not been called yet. [\ref UnifiedTest_TransferElement_B_8_5_3 "U"]
      - 8.5.4 If Device::activateAsyncRead() is called while the device is not opened or has an error, this call has no effect. If it is called when no deactivated transfer element exists, this call also has no effect.
      - 8.5.5 Device::activateAsyncRead() does not throw any exceptions.
      - 8.5.6 When Device::activateAsyncRead() returns, it is not guaranteed that all initial values have been received already.
  - \anchor transferElement_B_8_6 8.6 Blocking TransferElement::read() calls can be interrupted by the application via TransferElement::interrupt().
    - \anchor transferElement_B_8_6_1 8.6.1 TransferElement::interrupt() places a boost::thread_interrupted exception into the TransferElement::_readQueue. [\ref testTransferElement_B_8_6_1 "T"]
    - \anchor transferElement_B_8_6_2 8.6.2 This casues any read operation to complete immediately and throw the boost::thread_interrupted exception, after any unread data on the queue before the exception has been read normally. [\ref testTransferElement_B_8_6_2 "T"]
    - \anchor transferElement_B_8_6_3 8.6.3 The operation receiving the boost::thread_interrupted exception will also obey \ref transferElement_B_5 "5", i.e. postRead() is still called. [\ref testTransferElement_B_8_6_3 "T"]
    - \anchor transferElement_B_8_6_4 8.6.4 Calling TransferElement::interrupt() does not disturb the subsequent operation of the TransferElement. [\ref testTransferElement_B_8_6_4 "T" (base-class part)]
    - \anchor transferElement_B_8_6_5 8.6.5 Calling TransferElement::interrupt() without AccessMode::wait_for_new_data will cause a ChimeraTK::logic_error. [\ref testTransferElement_B_8_6_5 "T"]

- 9. If one transfer element of a device has seen an exception(*), all other transfer elements of the same device must also be aware of this.
   - \anchor transferElement_B_9_1 9.1 The transfer element which detects the exception reports it to its TransferElement::exceptionBackend by calling DeviceBackend::setException \ref transferElement_comment_B_9_1 "(*)" (cf. \ref transferElement_B_10_1 "10.1")
   - \anchor transferElement_B_9_2 9.2 TransferElements with wait_for_new_data flag
    - \anchor transferElement_B_9_2_1 9.2.1 Each transfer element deactivates asynchronous reads so no further data is pushed into the TransferElement::_readQueue until open() has been called successfully in the backend (*) and Device::activateAsyncRead() has been called [\ref UnifiedTest_TransferElement_B_9_2_1_single "U"]
    - \anchor transferElement_B_9_2_2 9.2.2 Exactly one ChimeraTK::runtime_error is pushed into the queue of *each* transfer elements of the backend with wait_for_new_data (*). This must happen after 9.2.1. to avoid race conditions. [\ref UnifiedTest_TransferElement_B_9_2_2_single "U"]
    - 9.2.3 The first data on the queue after the exception is the initial value send when calling Device::activateAsyncRead() (see 8.5.2).
    - 9.2.4 The backend must make sure 9.2.2 is finished before a call to Device::activateAsyncRead() re-activates the asynchronous transfers again (*).
   - \anchor transferElement_B_9_3 9.3 TransferElements without wait_for_new_data [\ref UnifiedTest_TransferElement_B_9_3 "U"]
     - \anchor transferElement_B_9_3_1 9.3.1 Each call to doReadTransferSynchonously() will throw a ChimeraTK::runtime error until open() has been called successfully.
   - \anchor transferElement_B_9_4 9.4 Write operations will throw  a ChimeraTK::runtime error in doWriteTrasferYyy() until open() has been called successfully. [\ref UnifiedTest_TransferElement_B_9_4_single "U"]

- 10. DeviceBackends
  - \anchor transferElement_B_10_1 10.1 DeviceBackend::setException() triggers the actions described in \ref transferElement_B_9_2 "9.2", \ref transferElement_B_9_3 "9.3" and \ref transferElement_B_9_4 "9.4"
    - \anchor transferElement_B_10_1_1 10.1.1 Meta-backends like the LogicalNameMappingBackend delegate this call to all of their target backends
    - 10.1.2 Further calls to DeviceBackend::setException() have no effect until Device::open() has successfully been called.
    - \anchor transferElement_B_10_1_3 10.1.3 Application code can call Device::setException() to trigger the exception state \ref transferElement_comment_B_10_1_3 "(*)"
  - \anchor transferElement_B_10_2 10.2 TransferElements know which backend to report exceptions to
    - 10.2.1 TransferElement::exceptionBackend is set when the TransferElement is created by a backend
    - 10.2.2 Meta-backends like the LogicalNameMappingBackend can replace the exceptionBackend so the exception reporting is re-directed to the meta-backend.

- 11. A VersionNumber object is attached to each data transfer.
  - 11.1 VersionNumber objects
    - 11.1.1 can be stricly ordered by their time of creation within the application (process lifetime) using the C++ comparison operators (<, ==, > etc.),
    - 11.1.2 additionaly contain a std::chrono::system_clock timestamp which allows to weakly order the objects even across applications/processes,
    - 11.1.3 are copyable, and
    - 11.1.4 can be initiallised with a {nullptr} which yields a special instance that sorts before all normal instances. All {nullptr} constructed objects are equal (==).
    - 11.1.5 The default constructor creates a new VersionNumber which is larger than all previously created VersionNumbers in a thread safe way.
  - 11.2 VersionNumber objects are used
    - \anchor transferElement_B_11_2_1 11.2.1 to determine which data is older \ref transferElement_comment_B_11_2_1 "(*)", as needed e.g. by bidirectional process variable implementations [\ref UnifiedTest_TransferElement_B_11_2_1_syncRead "U"], and
    - \anchor transferElement_B_11_2_2 11.2.2 to build a consistent data set from multiple TransferElements (see DataConsistencyGroup). This requires the data sources (e.g. backend implementations) to attach the same VersionNumber to different TransferElements if the data is consistent. [\ref UnifiedTest_TransferElement_B_11_2_2_sameRegister "U"]
    - 11.2.3 From the previous two points it follows that backend implementations must create a new VersionNumber for all data that is received or read, or associcate a known version number according to \ref transferElement_B_11_2_2 "11.2.2"
  - \anchor transferElement_B_11_3 11.3 The VersionNumber of the last successfully written/read data of a TransferElement can be obtained through TransferElement::getVersionNumber() (cf. \ref transferElement_B_4_3_2 "B.4.3.2"). [\ref testTransferElement_B_11_3 "T"]
  - 11.4 The VersionNumber for a transfer is given as an optional argument to TransferElement::write() resp. TransferElement::writeDestructively(). If the argument is missing, a new VersionNumber is generated.
    - \anchor transferElement_B_11_4_1 11.4.1 The VersionNumber passed to the write call must be greater or equal to the one returned by TransferElement::getVersionNumber() of the same TransferElement, otherwise a ChimeraTK::logic_error is thrown by the TransferElement base class. Write calls on different instances of TransferElement (say `a` and `b`) do not need to follow this rule, i.e. `a->write(v1); b->write(v2);` is allowed even if `v2 < v1` \ref transferElement_comment_B_11_4_1 "(*)". [\ref testTransferElement_B_11_4_1 "T"]
    - \anchor transferElement_B_11_4_2 11.4.2 The VersionNumber is passed on to the TransferElement implementation via the calls TransferElement::doPreWrite(), TransferElement::doWriteTransfer() resp. TransferElement::doWriteTransferDestructively() and TransferElement::doPostWrite(), after the precondition 11.4.1 has been checked. [\ref testTransferElement_B_11_4_2 "T"]
  - \anchor transferElement_B_11_5 11.5 If a transfer was not successful (exception has been thrown), the VersionNumber returned by TransferElement::getVersionNumber() does not change (cf.  \ref transferElement_B_6_4 "B.6.4"). [\ref testTransferElement_B_11_5 "T"]
  - \anchor transferElement_B_11_6 11.6 Before the first successful transfer, TransferElement::getVersionNumber() always returns the {nullptr} constructed VersionNumber. [\ref testTransferElement_B_11_6 "T", \ref UnifiedTest_TransferElement_B_11_6 "U"]
  - \anchor transferElement_B_11_7 11.7 *To be decided if we only allow 11.7.2:* Bi-directional variables
    - \anchor transferElement_B_11_7_1 11.7.1 *either* do not guarantee that consecutive calls to TransferElement::getVersionNumber() always return a VersionNumber that is equal or greater than the one from the previous call \ref transferElement_comment_B_11_7_1 "(*)"
    - \anchor transferElement_B_11_7_2 11.7.2 *or* discard values with lower version numbers \ref transferElement_comment_B_11_7_2 "(*)"

- 12. TransferGroup
  - 12.1 TransferGroups are only allowed for TransferElements without AccessMode::wait_for_new_data.
  -  [TODO]

- 13. ReadAnyGroup [TODO]

- 14. DataConsistencyGroup [TODO]

- 15. AccessModeFlags
  - 15.1 The TransferElement has a protected object TransferElement::_accessModeFlags.
  - 15.2 It can be read via TransferElement::getAccessModeFlags().
  - 15.3 It is set through a constructor argument of TransferElement.
    - 15.3.1 The constructor argument does not have a default value. It must be set correctly by the TransferElement implementation in their constructor.

### New sections in RC 08 !! UNREVIEWED EXTENSION TO THE SPEC !!###

- \anchor transferElement_B_10_3 10.3 DeviceBackend::activateAsyncRead() activates the sending of data through the TransferElement::_readQueue() as described in \ref transferElement_B_8_5 "8.5"
  - \anchor transferElement_B_10_3_1 10.3.1  Meta-backends like the LogicalNameMappingBackend delegate this call to all of their target backends

### (*) Comments ###
- \anchor transferElement_comment_B_3_2_2_2 \ref transferElement_B_3_2_2_2 "3.2.2.2" The optimisation is still optional, backends are allowed to not make use of it. In this case, the content of the application buffer will be intact after writeDestructively(). Applications still are not allowed to use the content of the application buffer after writeDestructively().


- 4.1 preXxx() is part of the operation, not of the actual transfer. In case of reads with AccessMode::wait_for_new_data the transfer is asynchronously initiated by the device and not connected to the operation. Hence backend implementations usually have an empty doPreWrite(), but decorator-like implementations still can use it to execute preparatory tasks.

- 4.3.1 In write operations the buffer might be swapped out in doPreWrite() and swapped back in doPostWrite() to restore it for non-destructive write operations to avoid copying of large arrays.

- 5. Reason: It might be that the user buffer has to be swapped out during the transfer (while taking away the ownership of the calling code), and this must be restored in the postXxx action.

-  \anchor transferElement_comment_B_5_1 \ref transferElement_B_5_1 "5.1" The boost::thread_interrupted exception, which is thrown internally as described in \ref transferElement_B_8_6 "8.6", is treated equally.

- \anchor transferElement_comment_B_6_4 \ref transferElement_B_6_4 "6.4" This means that implementations which raise boost::numeric::bad_numeric_cast in their doPostRead() implementation must make sure that the data buffer is either not toched as long as exceptions can occur, or that it is restored in case of an exception.

- \anchor transferElement_comment_B_7_2 \ref transferElement_B_7_2 "7.2" Usually, writes are implemented as synchronous transfers, in which case no previous data can be lost. In case of asynchronous write transfers (as e.g. implemented in the ControlSystemAdapter's ProcessArray), the implementation must ensure the specified behaviour e.g. by using cppext::future_queue::push_overwrite() or a similar functionality. Please keep in mind that the return value of cppext::future_queue::push_overwrite() does not guarantee which data is lost *only* if concurrent push_overwrite() calls are executed in a multi-producer environment. TransferElements are not thread safe anyway, hence push_overwrite() will always overwrite old data in this context.

- \anchor transferElement_comment_B_8_2 \ref transferElement_B_8_2 "8.2" Conceptually. In the current implementation TransferElement::_readQueue is a void queue, which is set up as a continuation of the data transport queue. The important point here that all described actions like exception handling are done on TransferElement::_readQueue.

- 8.2.2 This allows to discard values inside a continuation of a cppext::future_queue. It is used e.g. by the ControlSystemAdapter's BidirectionalProcessArray. [TBD: It could be replaced by a feature of the cppext::future_queue allowing to reject values in continuations...]

- 8.5 Device::open() does not automatically activate the asyncronous sending because the device might need some initalisation setting to produce valid data (for example setting the correct ADC range). By delaing the activation of asyncronous reads the application has the possibility to do the initialisation before the first data is being send, and can avoid invalid initial values on the process variables.
- 8.5.1 Conceptually activating an asyncronous read is like subscribing a variable, and deactivating it is like unsubscribing a variable in a publish-subscribe pattern. The actual implementation depends on the details of the protocols.
- 8.5.2 As the asynchonous mechanism and a synchronous read are two idependent channels there are potential race condition, depending on the exact protocol.
  The backend has to avoid this if possible. If it cannot be avoided, the implementation must make sure that the last value in the queue is the newest value, and this is not dopped or missed, even if the values before are not in order or send twice.

- 9. It does not matter if the exception occured in an asynchronous or synchronous read, or in a write operation.
- \anchor transferElement_comment_B_9_1 \ref transferElement_B_9_1 "9.1" It depends on the implementation whether the backend already has done 9.2 and 9.3 when the transfer elements
  first sees the exeption and then reports it back again via DeviceBackend::setException(), or if it only happend in that function. The important part is
  that meta-backends and the user application can trigger this situation (see \ref transferElement_B_10_1_1 "10.1.1" and \ref transferElement_B_10_1_3 "10.1.3")
- 9.2.1 Open can be called again on an already opened backend to start error recovery.
- 9.2.2 If an asynchronous read transfer is the first one to detect the exception, the implementation must make sure that it is only pushed once into the queue, and informing "all" transfer elememnts with wait_for_new data does not send it again if it was already put into the queue.
- 9.2.4 Avoid race conditions here. The call to Device::activateAsyncRead() usually is done from a different thread than the transfer which caused the exception.

- \anchor transferElement_comment_B_10_1_3 \ref transferElement_B_10_1_3 "10.1.3" For instance a watchdog which monitors a reference register to detect firmware reboots that is not seen on the transport layer can trigger the exception state to inhibit asynchronous transfers while running a recovery procedure.

- \anchor transferElement_comment_B_11_2_1 \ref transferElement_B_11_2_1 "11.2.1" This means the version number has to be created as soon as data is received, for instance in the receiver thread of a TransferElement with AccessMode::wait_for_new_data, and not in the doPostRead() of the read() operation.

- \anchor transferElement_comment_B_11_4_1 \ref transferElement_B_11_4_1 "11.4.1" Smaller version numbers on later write calls of a different instance can conceptionally not be avoided if the instances are used by different, unsynchronised threads. Even within the same thread, the information written to different instances can come from different sources and hence might have independent version numbers.

- \anchor transferElement_comment_B_11_7_1 \ref transferElement_B_11_7_1 "11.7.1" If a write call is done there might be older data in the read queue, which results in a lower version number once a read is called.
- \anchor transferElement_comment_B_11_7_2 \ref transferElement_B_11_7_2 "11.7.2" The BiDirectionalProcessArray is implemented like this.


## C. Requirements for all implementations (full and decorator-like) ##

- 1. Other exceptions than ChimeraTK::logic_error, ChimeraTK::runtime_error and boost::numeric::bad_numeric_cast are not allowed to be thrown or passed through at any place under any circumstance (unless of course they are guaranteed to be caught before they become visible to the application, like the detail::DiscardValueException). The framework (in particular ApplicationCore) may use "uncatchable" exceptions in some places to force the termination of the application. Backend implementations etc. may not do this, since it would lead to uncontrollable behaviour.
- \anchor transferElement_C_2 2. In doPostXxx no new ChimeraTK::runtime_error or ChimeraTK::logic_error are thrown. Exceptions that were risen in doPreXxx or doXxxTransferYyy, or that were received from the queue (see B.8.3) are rethrown. \ref transferElement_comment_C_2 "(*)"
  - 2.1 The TransferElement base class stores the caught exceptions in TransferElement::_activeException.
  - 2.2 postXxx() is re-throwing the exception after delegating to doPostXxx().
  - \anchor transferElement_C_2_3 2.3 Decorators delegate the TransferElement::_activeException to their target using TransferElement::setActiveException(). If the decorator's _activeException is not nullptr, the targets _activeException is replaced by it, and the decorator's _activeException, which is handed by reference, is set to nullptr \ref transferElement_comment_C_2_3a "(*)". The target is now responsible for handling the exception. If the decorator's _activeException already is nullptr, setActiveException() has no effect, so an active exception in the target is not overwritten \ref transferElement_comment_C_2_3b "(*)". \ref transferElement_comment_C_2_3c "(*)"
    - 2.3.1 Decorators which are throwing themselves in doPreXxx(), before delegating to the target preXxx(), remember this. If they did throw in doPreXxx(), then in doPostXxx() they do not call setActiveException() of the target and do not delegate to postXxx(). The exception is then re-thrown by the decorator's postXxx().

- 3. ChimeraTK::runtime_error in principle are recoverable. It is thrown, if the device (including the communication link) does not behave as expected. A later call to the same function (after the recovery has been triggered, cf. \ref transferElement_B_9_2_1 "B.9.2.1" resp. \ref transferElement_B_9_3_1 "B.9.3.1") must be able to succeed (for instance if a network outage has been resolved).
   ChimeraTK::runtime_error may only be thrown in
  - 3.1 doXxxTransferYyy(). It is the only exception that can occur in this function
  - 3.2 TransferElement::isReadable(), TransferElement::isWriteable() or TransferElement::isReadOnly() if there is no map file or such, and it needs to be determined from the running device.
  - 3.3 doPreXxx(), if the information returned by the functions in 3.2 is not yet available and needs to be determined from the running device.

- 4. boost::numeric::bad_numeric_cast may only be thrown in
  - 4.1 TransferElement::doPreWrite()
  - 4.2 TransferElement::doPostRead(), but only if updateDataBuffer == true
  - 4.3 This exception can in principle be avoided by chosing a user data type that can fit the data without overflow when reading, or small enough so the process variable can hold the data without overflow when writing. New implementations should not throw this exception. Instead a check should be done in the constructor and a ChimeraTK::logic_error should be thrown (see 5.2.4) (*).

- 5. ChimeraTK::logic_error must follow strict conditions. It is thrown, if the application (including its configuration files) does not behave as expected.
  - 5.1 logic_errors must be deterministic. They must always be avoidable by calling the corresponding test functions before executing a potentially failing action (*), and must occur if the logical condition is not fulfilled and the function is called anyway.
  - 5.2 Any logic_error must be thrown as early as possible(*). They are thrown **if and only if** one of the following conditions are met:
    - 5.2.1 A register does not exists my that name
      - 5.2.1.1 Can be checked in the catalogue (*)
      - 5.2.1.2 Thrown in the constructor if possible (*), otherwise in doPreXxx(), isReadable(), isWriteable() and isReadOnly().
    - 5.2.2 The size or dimension of the requested TransferElement is too large (*)
      - 5.2.2.1 Can be checked in the catalogue.
      - 5.2.2.2 Thrown in the constructor if possible, otherwise in doPreXxx().
    - 5.2.3 The wrong AccessMode flags are provided
      - 5.2.3.1 Can be checked in the catalogue.
      - 5.2.3.2 Thrown in the constructor if possible, otherwise in doPreXxx(), isReadable(), isWriteable() and isReadOnly().
    - 5.2.4 The requested user data type is too small to hold the data without range overflow when reading, or too big when writing (*)
      - 5.2.4.1 ToDo: cannot be checked in the catalogue to a sufficient degree
      - 5.2.4.2 Thrown in the constructor if possible, otherwise in doPreXxx()
    - \anchor transferElement_C_5_2_5 5.2.5 A read/write operation is started while the backend is still closed [\ref UnifiedTest_TransferElement_C_5_2_5_syncRead "U", \ref UnifiedTest_TransferElement_C_5_2_5_asyncRead "U", \ref UnifiedTest_TransferElement_C_5_2_5_write "U"]
      - 5.2.5.1 Check with DeviceBackend::isOpen().
      - 5.2.5.2 Thrown in doPreXxx() (*)
    - 5.2.6 A read operation is executed on a transfer element that cannot be read
      - 5.2.6.1 Check with TransferElement::isReadable().
      - 5.2.6.2 Thrown in doPreRead()
    - 5.2.7 A write operation is executed on a transfer element that cannot be written
      - 5.2.7.1 Check with TransferElement::isWriteable() or TransferElement::isReadOnly()
      - 5.2.7.2 Thrown in doPreWrite()
  - 5.3 The information mentioned in 5.2 which determines whether a ChimeraTK::logic_error is thrown is considered to be constant under normal circumstances. Only when open() is called (either for the first time or to recover form a ChimeraTK::runtime_error) the information might change and applications are expected to check it again.
    - \anchor transferElement_C_5_3_1 5.3.1 If a device is changing this information on its own (e.g. makes a register read-only which was readable before), and the application hence performes an operation which is no longer possible, a ChimeraTK::runtime_error must be thrown (unexpected behaviour of the device). \ref transferElement_comment_C_5_3_1 "(*)"
  - 5.4 Two remarks about how to follow these rules:
    - 5.4.1 If there is an error in the map file and the backend does not want to fail on this in backend creation, the register must be hidden from the catalogue.
    - 5.4.2 isReadable(), isWriteable() and isReadOnly() might have to check for the existance of the register from a running backend (in case there is no map file). This implies that these calls may throw ChimeraTK::logic_error and ChimeraTK::runtime_error exceptions.

### (*) Comments ###
- \anchor transferElement_comment_C_2 \ref transferElement_C_2 "2." This concerns all exceptions that were caught, not only ChimeraTK::runtime_error and ChimeraTK::logic_error.
- \anchor transferElement_comment_C_2_3a \ref transferElement_C_2_3 "2.3" It is important that after calling the target's setActiveException(), the decorator has a nullptr in its _activeException. This is for instance required if the target is the ApplicationCore::ExceptionHandlingDecorator. It suppresses the exception and then the outer layers must not throw any more.
- \anchor transferElement_comment_C_2_3b \ref transferElement_C_2_3 "2.3" Notice that if both the decorator and the target TransferElement have an active exception, the exception in the target is replaced. This is intentional. It can only happen if the same low level TransferElement is used by several high level elements in a TransferGroup. In this case the tranfer had not been executed because the high level elements had already seen the exception in preXxx, and the exception in the target can only be the exception which had been put in by another high level element in its doPostXxx, and thus has already been thrown.
- \anchor transferElement_comment_C_2_3c \ref transferElement_C_2_3 "2.3" This behaviour is implemented in doPostXxx() of the NDRegisterAccessorDecorator base class, which is usually called by decorator implementations.
- 4.3 If there is no map file or such, the information about the target data types must be deretmined from the device. This cannot be done in the constructor if the backend is still closed. In this case the overflow check can happen at runtime and result in a boost::numeric::bad_numeric_cast.
- 5.1 Test functions do not yet exist for everything. This needs to be changed!
- 5.2 Especially no logic_error must be thrown in doXxxTransferYyy() or doPostXxx(). All tests for logical consistency must be done in doPreXxx() latest.
- 5.2.1.1 It is legal to provide "hidden" registers not present in the catalogue, but a register listed in the catalogue must always work.
- 5.2.1.2 If a backend cannot decide the existence of a register in the accessor's constructor (because there is no map file or such, and the backend might be closed), it needs to check the presence later. If the information is available in the constructor, the check has to be done there.
- 5.2.2 This also includes that the offset in a one dimensional case is so large that there are not enough elements left to provide the requested data.
- 5.2.4 Some backends currenty throw a boost::numeric::bad_numeric_cast instead as described in 5.
- 5.2.5.2 The generic tests if a backend is opened, or if an accessor readable or writeable are intentionally not implemented in TransferElement because they would invovle additional virtual function calls. To avoid these each implementation has to implement the checks in doPreXxx().
- \anchor transferElement_comment_C_5_3_1 \ref transferElement_C_5_3_1 "5.3.1" To recover from the ChimeraTK::runtime_error, the application must call open(). At that point, the information is allowed to be changed. If the application fails to recheck the information, a retry of the failed operation will result in a ChimeraTK::logic_error. This behaviour follows the requirement to throw logic_errors only in doPreXxx(): if during a transfer the backend discovers that the operation is no longer allowed, a runtime_error must be thrown.

## D. Requirements for full implementations (e.g. in backends) ##

- 1. If AccessMode::wait_for_new_data is specified:
  - 1.1 The TransferElement::_readQueue is a cppext::future_queue of type 'void' which exists in each transfer element. For transfer elements with AccessMode::wait_for_new_data it usually is the continuation queue of another future_queue which is transporting the data. The data type is implementation dependent. Common functionality like exception handling and waiting for new data is implemented on TransferElement::_readQueue.
  - 1.2 TransferElement::_readQueue is initialised in the constructor. [TBD: Allow setting the queue length through the public API?]
  - 1.3 TransferElement::_readQueue is pushed whenever new data has arrived. If important for the implementation, the return value of cppext::future_queue::push_overwirte() will tell whether data has been discarded (*).

  - 1.4 In case an exception is detected during an asychronous transfer (for instance in a separate thread), the exception must be stored on the TransferElement::_readQueue. The TransferElement implementation will then make sure that the exception is properly rethrown in postRead (just like for synchronous transfers).
- 2. In doPostRead() the whole application buffer (data buffer and meta data) must be updated together if updateDataBuffer is true and there was no exception, or not at all in all other cases.

### (*) Comments ###

1.3 Either the currently pushed data or older data on the queue might be discarded. In any case there will be one call less to TransferElement::doPostRead(), because the number of entries in the queue could not be increased because it was full

## E. Requirements for decorator-like implementations ##

- 1. If AccessMode::wait_for_new_data is specified, TransferElement::_readQueue is initialised in the constructor with a copy of the readQueue of the target TransferElement.
  - 1.1 Decorator-like implementations with multiple targets must provide a readQueue e.g. by using cppext::future_queue::when_any() or cppext::future_queue::when_all().

- 2. All functions doPreXxx, doXxxTransferYyy and doPostXxx must delegate to their non-do counterparts (preXxx, xxxTransferYyy and postXxx). Never delegate to the do... of the target implementation functions directly.

- 3. If a function of the same instance should be called, e.g. if doWriteTransferDestructively() should redirect to doWriteTransfer(), or if doPostRead() should call doPostRead() of a base class, call to do-version of the function. This is merely to avoid code duplication, hence the surrounding logic of the non-do function is not wanted here.

- 4. Decorators must merely delegate doXxxTransferYyy, never add any functionalty there. Reason: TransferGroup might effectively bypass the decorator implementation of these functions.

- 5. All real decorators are in fact decorators of NDRegisterAccessors<USER_TYPE>. Each decoration level contains one NDRegisterAccessors<USER_TYPE>::buffer_2D. The
     decorator implementation must make sure that its buffer is correctly synchronised with the target's buffer.(*)

- 6. TransferElement::_versionNumber and  TransferElement::_dataValitiy are also part of the applicaton buffer. They also must be synchronised.
  - 6.1 When reading, TransferElement::_versionNumber and  TransferElement::_dataValidity have to be copied over in doPostRead(), after a delegating to the target postRead() and only if there has been no exception.
    -  \anchor transferElement_E_6_1_1 6.1.1 Decorators then must always copy the meta data from their target, even if updateDataBuffer is false and NDRegisterAccessors<USER_TYPE>::buffer_2D is not updated. \ref transferElement_comment_E_6_1_1 "(*)"
  - 6.2 When writing, TransferElement::_dataValidity has to be copied to the target in doPreWrite() before delegating. Do **not** manually synchonise the version number. This is done by the TransferElement base
     class in postWrite according to  \ref transferElement_B_4_3_2 "B.4.3.2".

### (*) Comments ###

- 5. The NDRegisterAccessorDecorator base class already contains an implementation which does this in doPreXxx() and doPostXxx(). You usually call it from the Decorators implementation, as mentioned in 3.
- \anchor transferElement_comment_E_6_1_1 \ref transferElement_E_6_1_1 "6.1.1" This is required for by the ApplicationCore::ExceptionHandlingDecorator, which suppresses exceptions, but requires the meta data to be updated without changing the data buffer.

## F. Implementation in the framework (e.g. class TransferElement itself)

**Note:** This section is biased by the current implementation and mostly lists parts that needs to be changed!


- 4. ApplicationCore

  - 4.1 For the TestableModeAccessorDecorator: TransferElement::transferFutureWaitCallback() does no longer exist. Instead preRead() will now be called. In case of readAny, multiple calls to preRead() on different accessors will be made on the first call to readAny - the decorator has to deal with that properly.


*/

} // end of namespace ChimeraTK
