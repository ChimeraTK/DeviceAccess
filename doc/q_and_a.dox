namespace mtca4u{
/**
\page q_and_a Questions and Answers

This page is answering questions which users have asked when working with the
DeviceAccess Library.

\section why_no_accessor_assignment Why do RegisterAccessors not have an assignment operator for other RegisterAccessors?
We decided to explicitly disable the assignmet of one accessor to another
because it is ambiguous what the excpected behaviour is:
- Assign the data values of the other accessor?
- Replace the complete accessor, incl. the register it points to.
Depending on the contect where you use it you might expect either, so we
decided to disable it to avoid unexpected behaviour.

Use explicit conversion and replace() (defined in the NDRegisterAccessorBridge base
class) to disctinguish which functionalitily you want:

\code
    // Note: This is calling the copy constructor, not the assignment operator.
    auto a = _device->getScalarRegisterAccessor<int>("REG_A");
    auto b = _device->getScalarRegisterAccessor<int>("REG_B");
     
    a = int(b);   // replace the value of 'a' with the value of 'b'
    a.replace(b); // replace the whole accessor, now 'a' points to REG_B
\endcode

### Details:
The original implementation had the default assignment operator which would
replace the whole accessor, incl. the register it points to. This is what you
need in the constructor of a class to initialise its member accessors:
\code
    // in the header (class definition)
    ScalarRegisterAccessor<int> _a,_b;
    
    // in the .cc file (implementation of the constructor)
    _a = _device->getScalarRegisterAccessor<int>("REG_A");
    _b = _device->getScalarRegisterAccessor<int>("REG_B");
\endcode

In addition the Accessors have operators which let you
treat it like the primitive data type it represents (or the std::vector of it):
      
\code    
    _a = 7;    // Assigment for int works, explicitly defined
    _b.read();
    _a += _b;  // Works through implicit conversion,
               // increases the content of _a by the content of _b.
    _a.write();
\endcode

With the assignment operator, however, this leads to unexpected behaviour:

\code
    _a = _b * 2; // replaces the value  of _a with 2* value of _b
    _a = _b;     // WHOOPS, _a now points to "REG_B"
\endcode

If we would have designed the assignment operator to only replace the value,
the initialisation of the variable would behave unintuitively:

\code
    // This works as expected because in fact the copy constructor is called, 
    // although the syntax uses the euqals sign.
    auto c = _device->getScalarRegisterAccessor<int>("REG_C");
    
    // This does not work. 'd' is not initialised yet and the value assignment
    // is called, which leads to an assertion because of null pointer
    // dereferencing at run time.
    ScalarRegisterAccessor<int> d;
    d = _device->getScalarRegisterAccessor<int>("REG_D");
\endcode

Hence, we decided that there is no intuitive implementation for the assigment
operator and explicitly deactivated it. The last example assigning to \c d will
already fail at compile time.
*/
}// end of namespace
