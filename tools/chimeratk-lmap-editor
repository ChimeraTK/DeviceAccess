#!/usr/bin/env python3

import os
import sys
import re
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
#import xml.etree.ElementTree as ET
import lxml.etree as ET

#######################################################################################################################
#######################################################################################################################
# event filter to disable the mouse wheel on combo boxes
class NoWheelFilter(QObject):
    def eventFilter(self,  obj,  event):
      if event.type() == QEvent.Wheel:
        return True
      return False

#######################################################################################################################
#######################################################################################################################
# Main application class
class MainWindow(QMainWindow):

#######################################################################################################################
# constructor: create main window
    def __init__(self):
        super(MainWindow, self).__init__()

        # initialise current file name
        self.fileName = ""
        
        # create the mouse wheel filter for the combo boxes
        self.noWheelFilter = NoWheelFilter()

        # create grid layout    
        self.grid = QGridLayout()

        # create main tree widget
        self.listWidget = QTreeWidget()
        header = QTreeWidgetItem(["Name","Target Type","Target Device","Target Register", "First Index", "Length", "Channel", "Value"])
        self.listWidget.setHeaderItem(header)
        self.listWidget.currentItemChanged.connect(self.selectListItem)
        self.listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget.setAutoScroll(True)
        self.listWidget.setAutoScrollMargin(10)
        self.listWidget.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.grid.addWidget(self.listWidget,1,1,1,3)
        self.listWidget.model().rowsInserted.connect(self.onInsertRows)

        
        # enable drag&drop, but not on the top-level
        self.listWidget.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget.invisibleRootItem().setFlags(Qt.ItemIsEnabled)

        # set column sizes of tree
        self.listWidget.setColumnWidth(0, 350)
        self.listWidget.setColumnWidth(1, 180)
        self.listWidget.setColumnWidth(2, 110)
        self.listWidget.setColumnWidth(3, 250)
        self.listWidget.setColumnWidth(4, 80)
        self.listWidget.setColumnWidth(5, 70)
        self.listWidget.setColumnWidth(6, 70)
        self.listWidget.setColumnWidth(7, 70)
        
        # add top level element
        toplevelItem = QTreeWidgetItem(self.listWidget, ["logicalNameMap"] )
        toplevelItem.setExpanded(True)
        
        # buttons for adding and deleting items
        self.buttonAddReg = QPushButton()
        self.buttonAddReg.setText('Add Register')
        self.grid.addWidget(self.buttonAddReg,2,1,1,1)
        self.buttonAddReg.clicked.connect(self.addRegister)
        self.buttonAddMod = QPushButton()
        self.buttonAddMod.setText('Add Module')
        self.grid.addWidget(self.buttonAddMod,2,2,1,1)
        self.buttonAddMod.clicked.connect(self.addModule)
        self.buttonDel = QPushButton()
        self.buttonDel.setText('Delete Item')
        self.grid.addWidget(self.buttonDel,2,3,1,1)
        self.buttonDel.clicked.connect(self.deleteItem)

        # add the menu
        self.makeMenu()

        # add status bar
        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)
        self.statusBar.showMessage('Ready.')

        # add grid layout
        self.widget = QWidget();
        self.widget.setLayout(self.grid);
        self.setCentralWidget(self.widget);

        # set window title and size
        self.setWindowTitle("ChimeraTK Logical Name Mapping editor")
        self.resize(1200, 800)

#######################################################################################################################
# insert a row in the tree view (e.g. on drag&drop)
    def onInsertRows(self, modelIndex, row1, row2):
        item = self.listWidget.itemFromIndex(modelIndex.child(row1,0))
        if(item is not None and item.text(1) != "") :
          self.listWidget.setItemWidget(item, 1, self.createTargetTypeComboBox(modelIndex.child(row1,0), item) )
          # update geometries to prevent misaligned combo boxes (only if visible, to speed up application start)
          if self.listWidget.isVisible():
            self.listWidget.updateGeometries()
        

#######################################################################################################################
# create the menu
    def makeMenu(self):

        menuBar = self.menuBar()
        fileMenu = menuBar.addMenu("&File")

        self._fileOpenAction = QAction("&Open...", None)
        self._fileOpenAction.triggered.connect(self.openFileDialog)
        fileMenu.addAction(self._fileOpenAction)

        self._fileSaveAction = QAction("Save &As...", None)
        self._fileSaveAction.triggered.connect(self.saveFileDialog)
        fileMenu.addAction(self._fileSaveAction)

        self._fileSaveAgainAction = QAction("&Save", None)
        self._fileSaveAgainAction.setEnabled(False)
        self._fileSaveAgainAction.triggered.connect(self.saveFileAgain)
        fileMenu.addAction(self._fileSaveAgainAction)

        self._fileImportMapAction = QAction("&Import map file...", None)
        self._fileImportMapAction.triggered.connect(self.importMapFileDialog)
        fileMenu.addAction(self._fileImportMapAction)

        self._exitAction = QAction("&Quit", None)
        self._exitAction.triggered.connect(self.exit)
        fileMenu.addAction(self._exitAction)

#######################################################################################################################
# add new register to the tree
    def addRegister(self):
        # create item
        item = self._create_node(self.listWidget.currentItem(), ["newRegister", "redirectedRegister"])

        # select the new entry in list
        self.listWidget.setCurrentItem(item)

#######################################################################################################################
# add new module to the tree
    def addModule(self):
        item = self._create_module_node(self.listWidget.currentItem(), "newModule")
        item.setExpanded(False)

        # select the new entry in list
        self.listWidget.setCurrentItem(item)

#######################################################################################################################
# delete item from the tree
    def deleteItem(self):
    
        # if module, ask first
        if self.listWidget.itemWidget(self.listWidget.currentItem(), 1) is None:
          msg = "Are you sure you want to delete the selected module with all registers and sub-modules inside?"
          reply = QMessageBox.question(self, 'Delete Item', msg, QMessageBox.Yes, QMessageBox.No)
          if reply != QMessageBox.Yes:
            return

        self.listWidget.currentItem().parent().removeChild(self.listWidget.currentItem())

#######################################################################################################################
# create a combo box to select the target type

    def updateComboBox(self, index, text):
        item =  self.listWidget.itemFromIndex(index)
        item.setText(1,text)

#######################################################################################################################
# create a combo box to select the target type
    def createTargetTypeComboBox(self, index, item):
        box = QComboBox()
        box.setEditable(False)
        box.addItem("redirected register", "redirectedRegister")
        box.addItem("channel of 2D register","redirectedChannel")
        box.addItem("constant","constant")
        box.addItem("variable","variable")
        box.setCurrentIndex( box.findData(item.text(1)) )
        box.setFocusPolicy( Qt.ClickFocus )
        box.installEventFilter(self.noWheelFilter)
        box.currentIndexChanged.connect(lambda _: self.updateComboBox(index, box.currentData()))
        return box


#######################################################################################################################
# select a different list item
    def selectListItem(self):
        if self.listWidget.itemWidget(self.listWidget.currentItem(), 1) is None:
          self.buttonAddReg.setEnabled(True)
          self.buttonAddMod.setEnabled(True)
        else:
          self.buttonAddReg.setEnabled(False)
          self.buttonAddMod.setEnabled(False)
          
        if self.listWidget.currentItem() == self.listWidget.topLevelItem(0):
          self.buttonDel.setEnabled(False)
        else:
          self.buttonDel.setEnabled(True)

#######################################################################################################################
# recusively populate the list widget with entries from the XML tree
    def updateList(self, theData):
        # clear the list first and create the top-level element
        self.listWidget.clear()
        toplevelItem = QTreeWidgetItem(self.listWidget, ["logicalNameMap"] )
        toplevelItem.setExpanded(True)
        # start with the root element, iterate through the entire tree
        self.updateListInternal(toplevelItem, theData)

#######################################################################################################################
# internally called by updateList()
    def updateListInternal(self, parentItem, entry):
        for child in entry:

            # create entry for module
            if(child.tag == "module"):
              item = self._create_module_node(parentItem, child.get("name"))

               # recures into module
              self.updateListInternal(item, child)

            # create entry for register
            else:

              # collect item data        
              data = [ child.get("name"), child.tag, "", "", "", "", "", "" ]
              if child.find("targetDevice") is not None:
                data[2] = child.find("targetDevice").text
              if child.find("targetRegister") is not None:
                data[3] = child.find("targetRegister").text
              if child.find("targetStartIndex") is not None:
                data[4] = child.find("targetStartIndex").text
              if child.find("numberOfElements") is not None:
                data[5] = child.find("numberOfElements").text
              if child.find("targetChannel") is not None:
                data[6] = child.find("targetChannel").text
              if child.find("value") is not None:
                data[7] = child.find("value").text

              self._create_node(parentItem, data)

#######################################################################################################################
# show open lmap file dialogue
    def openFileDialog(self):
        
        # create open device dialog
        dlg = QFileDialog(self)
        dlg.setAcceptMode(QFileDialog.AcceptOpen)
        dlg.setWindowTitle('Open XML logical map file')
        dlg.setViewMode( QFileDialog.Detail )
        dlg.setNameFilters( [self.tr('XML Logical Map Files (*.xlmap)'), self.tr('All Files (*)')] )
        dlg.setDefaultSuffix('xlmap')
        if self.fileName != "":
            dlg.setDirectory( os.path.dirname(self.fileName) )
        
        # show dialog, open only if user did not cancel
        if dlg.exec_() :
            # file name must be converted into standard python string
            name = str(dlg.selectedFiles()[0])
            # open the file
            self.openFile(name)

#######################################################################################################################
# open lmap file
    def openFile(self, fileName):
        # parse xml file
        theData = ET.parse(fileName).getroot()
        
        # populate list (recusively through all modules)
        self.updateList(theData)
            
        # store file name and change window title
        self.fileName = os.path.abspath(fileName)
        self.setWindowTitle(os.path.basename(self.fileName)+" ("+os.path.dirname(self.fileName)+") - ChimeraTK Logical Name Mapping editor")
        self._fileSaveAgainAction.setEnabled(True)

#######################################################################################################################
# show open lmap file dialogue
    def createXmlData(self):
             
        # create root element
        theData = ET.Element("logicalNameMap")
        
        # recursively iterate through the tree
        self.createXmlDataInternal(theData, self.listWidget.topLevelItem(0))
        
        return theData

#######################################################################################################################
# internally called by createXmlData
    def createXmlDataInternal(self, xmlElement, treeElement):
             
        for index in range(0,treeElement.childCount()):
          child = treeElement.child(index)
          
          # registers
          if(child.childCount() == 0):
            wg = self.listWidget.itemWidget(child, 1)
            targetType = str(wg.itemData(wg.currentIndex()))
            if targetType == "redirectedRegister":
              xmlChild = ET.SubElement(xmlElement, targetType, name=str(child.text(0)))
              ET.SubElement(xmlChild, "targetDevice").text = str(child.text(2))
              ET.SubElement(xmlChild, "targetRegister").text = str(child.text(3))
              if str(child.text(4)) != "":
                ET.SubElement(xmlChild, "targetStartIndex").text = str(child.text(4))
              if str(child.text(5)) != "":
                ET.SubElement(xmlChild, "numberOfElements").text = str(child.text(5))
            elif targetType == "redirectedChannel":
              xmlChild = ET.SubElement(xmlElement, targetType, name=str(child.text(0)))
              ET.SubElement(xmlChild, "targetDevice").text = str(child.text(2))
              ET.SubElement(xmlChild, "targetRegister").text = str(child.text(3))
              ET.SubElement(xmlChild, "targetChannel").text = str(child.text(6))
            elif targetType == "constant" or targetType == "variable":
              xmlChild = ET.SubElement(xmlElement, targetType, name=str(child.text(0)))
              ET.SubElement(xmlChild, "value").text = str(child.text(7))
              ET.SubElement(xmlChild, "type").text = "integer"
            else:
              QMessageBox.information(self, 'Error', 'Unknown target type: "'+targetType+'".')

          # modules
          else:
              xmlChild = ET.SubElement(xmlElement, "module", name=str(child.text(0)))
              self.createXmlDataInternal(xmlChild, child)
        
#######################################################################################################################
# show save lmap file dialogue
    def saveFileDialog(self):
        # create file-save dialog
        dlg = QFileDialog(self)
        dlg.setAcceptMode(QFileDialog.AcceptSave)
        dlg.setWindowTitle('Save XML logical map file')
        dlg.setViewMode( QFileDialog.Detail )
        dlg.setNameFilters( [self.tr('XML Logical Map Files (*.xlmap)'), self.tr('All Files (*)')] )
        dlg.setDefaultSuffix('xlmap')
        if self.fileName != "":
            dlg.setDirectory( os.path.dirname(self.fileName) )
        
        # show dialog, save only if user did not cancel
        if dlg.exec_() :
            # file name must be converted into standard python string
            name = str(dlg.selectedFiles()[0])
            # save the file
            self.saveFile(name)

#########################################################################################
# save lmap file
    def saveFile(self, fileName):
        
        # iterate through tree data
        theData = self.createXmlData()
        
        # format XML properly (with indentation, but without adding spaces and new lines to the text nodes)
        tree = ET.ElementTree()
        tree._setroot(theData)
        uglyXml = ET.tounicode(tree, pretty_print = True)
        text_re = re.compile('>\n\s+([^<>\s].*?)\n\s+</', re.DOTALL)    
        prettyXml = text_re.sub('>\g<1></', uglyXml)
        
        # safe to file
        with open(fileName, "w") as text_file:
          text_file.write(prettyXml)

        # show message of success
        QMessageBox.information(self, 'Map saved', 'Logical name mapping has been saved to file "'+fileName+'".')
        
        # store file name and change window title
        self.fileName = os.path.abspath(fileName)
        self.setWindowTitle(os.path.basename(self.fileName)+" ("+os.path.dirname(self.fileName)+") - ChimeraTK Logical Name Mapping editor")
        self._fileSaveAgainAction.setEnabled(True)

#########################################################################################
# save lmap file with same name
    def saveFileAgain(self):
        self.saveFile(self.fileName)

#######################################################################################################################
# show import map file dialogue
    def importMapFileDialog(self):
        
        # create open device dialog
        dlg = QFileDialog(self)
        dlg.setOption(QFileDialog.DontUseNativeDialog, True)
        dlg.layout().addWidget(QLabel("Device alias:"),4,0,1,1)
        deviceAliasWidged = QLineEdit()
        deviceAliasWidged.setText("DEV0")
        dlg.layout().addWidget(deviceAliasWidged,4,1,1,1)
        dlg.setAcceptMode(QFileDialog.AcceptOpen)
        dlg.setWindowTitle('Import MAP file')
        dlg.setViewMode( QFileDialog.Detail )
        dlg.setNameFilters( [self.tr('Map Files (*.map *.mapp)'), self.tr('All Files (*)')] )
        dlg.setDefaultSuffix('map')
        if self.fileName != "":
            dlg.setDirectory( os.path.dirname(self.fileName) )
        
        # show dialog, open only if user did not cancel
        if dlg.exec_() :
            # file name must be converted into standard python string
            name = str(dlg.selectedFiles()[0])
            # open the file
            self.importMapFile(name, str(deviceAliasWidged.text()))

    def _ensure_module(self, modules, moduleName):
        hierarchy = moduleName.split('/')
        path = "/"
        child = None
        for module in hierarchy:
            parent = modules[path]
            path += module
            if path not in modules:
                modules[path] = self._create_module_node(parent, module)

            child = modules[path]

        return child

    def _create_node(self, parent, data):
        node = QTreeWidgetItem(parent, data)

        # mae editable and dragable
        node.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEditable | Qt.ItemIsEnabled | Qt.ItemIsDragEnabled)

        return node

    def _create_module_node(self, parent, name):
        node = self._create_node(parent, [name] + [""] * 7)

        # for module nodes, things can also be dropped to
        node.setFlags(node.flags() | Qt.ItemIsDropEnabled)
        node.setExpanded(True)

        return node

#######################################################################################################################
# open lmap file
    def importMapFile(self, fileName, deviceAlias):
        # read file
        with open(fileName) as f:
          mapFileContent = f.readlines()

        # create module in the tree for the file
        modules = {"/": self._create_module_node(self.listWidget.topLevelItem(0), "importedFromMapFile")}

        # parse line by line
        for line in mapFileContent:
          line = line.strip()
          
          # ignore comment, empty lines and version tags
          if line[0:1] == "#" or line == "" or line[0:1] == "@":
            continue
            
          # extract name
          [fullName,x] = line.split(" ",1)
          
          # split name by components (modules and register name)
          names = fullName.split(".")
          registerName = names[len(names)-1]
          
          # merge module name, add empty item to force trailing /
          moduleName = '/'.join(names[:-1])
          moduleItem = self._ensure_module(modules, moduleName)

          # check for special cases: 2D registers and their sequences
          isChannel = False
          channelIndex = ""
          if registerName[0:len("AREA_MULTIPLEXED_SEQUENCE_")] == "AREA_MULTIPLEXED_SEQUENCE_":
            registerName = registerName[len("AREA_MULTIPLEXED_SEQUENCE_"):]
          elif registerName[0:len("SEQUENCE_")] == "SEQUENCE_":
            isChannel = True
            [ registerName, channelIndex] = registerName[len("SEQUENCE_"):].rsplit("_",1)
            
          # add item to tree
          if not isChannel:
            data = [ registerName, "redirectedRegister" , deviceAlias, moduleName+ "/" + registerName, "", "", "", "" ]
          else:
            data = [ registerName, "redirectedChannel" , deviceAlias, moduleName+ "/" + registerName, "", "", channelIndex, "" ]

          self._create_node(moduleItem, data)


#######################################################################################################################
# close the editor
    def exit(self):
        msg = "Are you sure you want to close the editor?"
        reply = QMessageBox.question(self, 'ChimeraTK Logical Name Mapping editor', msg, QMessageBox.Yes, QMessageBox.No)
        if reply != QMessageBox.Yes:
          return
        self.close()

#######################################################################################################################
# close the editor
    def closeEvent(self, event):
        msg = "Are you sure you want to close the editor?"
        reply = QMessageBox.question(self, 'ChimeraTK Logical Name Mapping editor', msg, QMessageBox.Yes, QMessageBox.No)
        if reply != QMessageBox.Yes:
          event.ignore()
        else:
          event.accept()

#######################################################################################################################
# main function: initialise app
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    if len(sys.argv) > 1 and sys.argv[1] != "":
        try:
            window.openFile(sys.argv[1])
        except IOError:
            QMessageBox.warning(window, 'Cannot open file', 'Cannot open file: '+sys.argv[1]+'.')
    window.show()
    sys.exit(app.exec_())
